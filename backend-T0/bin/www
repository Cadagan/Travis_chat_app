#!/usr/bin/env node
const LOCAL = true;
module.exports = {LOCAL};
if(LOCAL){
  require('dotenv').config();
}
/**
 * Module dependencies.
 */
var fs = require( 'fs' );
var app = require('../app');
var debug = require('debug')('t0:server');
var http = require('http');
var {connect} = require("../database");
var {initialize} = require("../websocket");
/**
 * Get port from environment and store in Express.
 */
if (!process.env.AUTH0_DOMAIN || !process.env.AUTH0_AUDIENCE) {
  throw 'Make sure you have AUTH0_DOMAIN, and AUTH0_AUDIENCE in your .env file';
}

var port = normalizePort(process.env.PORT || '3001');
app.set('port', "3001");

/**
 * Create HTTP server.
 */


let server;
connect().then(r =>{
  if(LOCAL){
    server = http.createServer(app);
  } else {
    server = http.createServer({
      //key: fs.readFileSync('/etc/letsencrypt/live/tatanpoker09.live/fullchain.pem'),
      //cert: fs.readFileSync('/etc/letsencrypt/live/tatanpoker09.live/cert.pem'),
      //ca: fs.readFileSync('/etc/letsencrypt/live/tatanpoker09.live/chain.pem'),
      requestCert: false,
      rejectUnauthorized: false
    },app);
  }
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  initialize(server, LOCAL);

  console.log("Server has been started, database has been connected.");
  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


});




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
module.exports = {LOCAL,
                  server};